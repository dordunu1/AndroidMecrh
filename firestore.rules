rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isSeller() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/sellers/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isConversationParticipant(conversationId) {
      let conversation = get(/databases/$(database)/documents/conversations/$(conversationId));
      return isAuthenticated() && 
        request.auth.uid in conversation.data.participants;
    }

    function isMessageSender(conversationId, messageId) {
      let message = get(/databases/$(database)/documents/conversations/$(conversationId)/messages/$(messageId));
      return isAuthenticated() && 
        message.data.senderId == request.auth.uid;
    }

    // Admins collection
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow write: if isOwner(userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Carts collection
    match /carts/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Products collection
    match /products/{productId} {
      allow read: if true;
      allow create: if isSeller();
      allow update: if (
        (isSeller() && resource.data.sellerId == request.auth.uid) ||
        isAdmin() ||
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['stockQuantity', 'colorQuantities', 'soldCount']))
      );
      allow delete: if isSeller() && (
        resource.data.sellerId == request.auth.uid || isAdmin()
      );
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.buyerId ||
        request.auth.uid == resource.data.sellerId ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.sellerId == request.auth.uid ||
        resource.data.buyerId == request.auth.uid ||
        isAdmin()
      );
    }

    // Sellers collection
    match /sellers/{sellerId} {
      allow read: if true;
      allow create: if isAuthenticated() && sellerId == request.auth.uid;
      allow update: if (
        (isAuthenticated() && sellerId == request.auth.uid) ||
        isAdmin() ||
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['totalOrders', 'balance']))
      );
    }

    // Withdrawals collection
    match /withdrawals/{withdrawalId} {
      allow read: if isAuthenticated() && (
        resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isSeller() && 
        request.resource.data.sellerId == request.auth.uid;
      allow update: if isAdmin();
    }

    // Refunds collection
    match /refunds/{refundId} {
      allow read: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.resource.data.buyerId == request.auth.uid ||
        isAdmin()
      );
      allow update: if isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;

      // Messages in conversations
      match /messages/{messageId} {
        allow read: if isConversationParticipant(conversationId);
        allow create: if isConversationParticipant(conversationId) && 
          request.resource.data.senderId == request.auth.uid;
        allow update: if isMessageSender(conversationId, messageId);
        allow delete: if isMessageSender(conversationId, messageId);
      }
    }

    // Analytics collection
    match /analytics/{docId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Platform Settings collection
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Transaction History collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow write: if isAdmin();
    }
  }
}